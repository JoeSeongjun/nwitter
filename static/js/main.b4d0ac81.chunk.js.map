{"version":3,"sources":["fbase.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","Auth","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","type","placeholder","required","onClick","prev","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEdditing","update","src","width","height","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","getMyNweets","signOut","push","Navigation","to","AppRouter","isLoggedIn","Exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b4d0ac81.chunk.js","sourcesContent":["//import { initializeApp } from 'firebase/app';\r\n\r\n// compat 경로를 추가함. version 차이\r\nimport firebase from 'firebase/compat/app';\r\nimport \"firebase/compat/auth\";\r\nimport \"firebase/compat/firestore\";\r\nimport \"firebase/compat/storage\";\r\n\r\n// import firebase from \"firebase/app\";\r\n// import \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\n//export default initializeApp(firebaseConfig);\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { authService, firebaseInstance } from \"fbase\";\r\nimport { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n\r\n        // check 문법 확인\r\n        const {\r\n            target: {name, value},\r\n        } = event;\r\n\r\n        if (name === \"email\"){\r\n            setEmail(value);\r\n        }else if (name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        // submit 이후, 새로고침 제한하기\r\n        event.preventDefault();\r\n\r\n        try {\r\n            let data;\r\n\r\n            if (newAccount) {\r\n                // Create NewAccount\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                // Log In\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            console.log(data);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n\r\n        \r\n    };\r\n \r\n    \r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    \r\n    // firebaseInstance auth 함수가 비동기 이므로, 비동기 처리.\r\n    const onSocialClick = async (event) => {\r\n        const {\r\n            target : { name },\r\n        } = event;\r\n\r\n        let provider;\r\n\r\n        if( name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if ( name === \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n\r\n    };\r\n\r\n    return (\r\n    <div>\r\n        <form onSubmit={onSubmit}>\r\n            <input \r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                required \r\n                value={email}\r\n                onChange={onChange}\r\n            />\r\n            <input \r\n                name=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                value={password}\r\n                onChange={onChange}\r\n            />\r\n            <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\" } />\r\n            <div />\r\n            {error}\r\n        </form>\r\n\r\n        <span onClick={toggleAccount}>\r\n            {newAccount ? \"Sign In\" : \"Create Account\" }\r\n        </span>\r\n\r\n        <div>\r\n            <button onClick={onSocialClick} name=\"google\">\r\n                Continue with Google\r\n            </button>\r\n            <button onClick={onSocialClick} name=\"github\">\r\n                Continue with GitHub\r\n            </button>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\n\nconst Nweet = ({nweetObj, isOwner}) => {\n\n  const [editing, setEditing] = useState(false);\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"삭제하시겠습니까?\");\n    \n    if(ok) {\n      \n      await dbService.doc(`nweet/${nweetObj.id}`).delete();\n      \n      if(nweetObj.attachmentUrl !== \"\"){\n        await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n      }\n    }\n  };\n\n  const toggleEdditing = () => setEditing((prev)=> !prev);\n\n  const onChange = (event) => {\n    const {\n      target: {value},\n    } = event;\n    setNewNweet(value);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`nweet/${nweetObj.id}`).update({text:newNweet});\n    setEditing(false);\n  };\n\n\n  return (\n    <div>\n      {editing ? (\n        <>\n        <form onSubmit={onSubmit}>\n          <input onChange={onChange} value={newNweet} required />\n          <input type=\"submit\" value=\"Update Nweet\" />\n        </form>\n        <button onClick={toggleEdditing}>Cancel</button>\n        </>\n      ):(\n      <>\n      <h4>{nweetObj.text}</h4>\n      {nweetObj.attachmentUrl && (\n        <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n      )}\n      {isOwner && (\n        <>\n        <button onClick={onDeleteClick}>Delete Nweet</button>\n        <button onClick={toggleEdditing}>Edit Nweet</button>\n        </>\n      )}\n      </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;","import { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n\nconst NweetFactory = ({userObj}) => {\n\n  const [nweet, setNweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n \n  const onSubmit = async (event) =>{\n    event.preventDefault();\n\n    // 이미지가 있을경우만 처리\n    let attachmentUrl = \"\";\n    if(attachment !== \"\"){\n        // 사용자 Id를 폴더명으로 Storage 생성! (uuidv4 > 파일명)\n    const attachmentRef = storageService\n                            .ref()\n                            .child(`${userObj.uid}/${uuidv4()}`);  \n\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        attachmentUrl = await response.ref.getDownloadURL();\n    }\n\n    \n    \n    await dbService.collection(\"nweet\").add({\n        text: nweet,\n        createdAt: Date.now(),\n        creatorId: userObj.uid,  // APP > Router > Home. userObj 정보 전달\n        attachmentUrl,\n    });\n    setNweet(\"\");\n    setAttachment(\"\");\n\n};\n\nconst onChange = (event) => {\n    event.preventDefault();\n\n    const {\n        target : {value},\n    } = event;\n\n    setNweet(value);\n};\n\nconst onFileChange = (event) => {\n    const {\n        target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n        const {\n            currentTarget: { result },\n        } = finishedEvent;\n        setAttachment(result);\n    }\n    reader.readAsDataURL(theFile);\n};\n\nconst onClearAttacthment = () => setAttachment(\"\");\n\nreturn(\n  <form onSubmit={onSubmit}>\n              <input\n                  value = {nweet}\n                  onChange={onChange}\n                  type = \"text\"\n                  placeholder = \"What's on your mind\"\n                  maxLength={120}\n              />\n              <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n              <input type=\"submit\" value=\"Nweet\" />\n              {attachment && (\n                  <div>\n                      <img src={attachment} width=\"50px\" height=\"50px\"/>\n                      <button onClick={onClearAttacthment}>Clear</button>\n                  </div>\n              )}\n          </form>\n  );\n};\n\nexport default NweetFactory;","import { dbService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n    \r\n    const [nweets, setNweets] = useState([]);\r\n\r\n    // DB정보가 실시간으로 표시되지 않는 로직\r\n    // const getNweets = async () => {\r\n    //     const dbNweets = await dbService.collection(\"nweet\").get();\r\n\r\n    //     dbNweets.forEach((document)=>{\r\n    //         // checkcheck 문법 확인..\r\n    //         const nweetObject = {...document.data(), id: document.id};\r\n    //         setNweets((prev)=> [nweetObject, ...prev]);\r\n    //     });\r\n    // };\r\n\r\n    useEffect(()=>{\r\n        // getNweets();\r\n\r\n        dbService.collection(\"nweet\").onSnapshot((snapshot)=>{\r\n            const newArray = snapshot.docs.map((document)=>({\r\n                id: document.id,\r\n                ...document.data(),\r\n            }));\r\n            setNweets(newArray);\r\n        });\r\n    }, []);\r\n\r\n\r\n    return(\r\n        <>\r\n        <NweetFactory userObj={userObj}/>\r\n        <div>\r\n            {nweets.map((nweet) => (\r\n                <Nweet\r\n                    key={nweet.id}\r\n                    nweetObj={nweet}\r\n                    isOwner={nweet.creatorId === userObj.uid}\r\n                />\r\n            ))}\r\n        </div>\r\n        \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home","import { authService, dbService  } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { isCompositeComponentWithType } from \"react-dom/test-utils\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Nweet from \"components/Nweet\";\r\n\r\n\r\nconst Profile = ({userObj, refreshUser}) => {\r\n\r\n    const [nweets, setNweets] = useState([]);\r\n\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n    const history = useHistory();\r\n\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target: {value},\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    };\r\n\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName){\r\n            await userObj.updateProfile({displayName : newDisplayName});\r\n            refreshUser();\r\n        }\r\n    };\r\n\r\n    const getMyNweets = async () => {\r\n        \r\n        // const tempNweets = await dbService.collection(\"nweet\")\r\n        //                                 // .where(\"creatorId\", \"==\", userObj.uid)\r\n        //                                 .where(\"creatorId\", \"==\", \"123123123\")\r\n        //                                 .orderBy(\"createdAt\", \"asc\")\r\n        //                                  .get();\r\n\r\n        // // // 작업\r\n        // setNweets(tempNweets);\r\n        // console.log(nweets.docs.map((doc)=>doc.data()));\r\n\r\n        dbService.collection(\"nweet\").onSnapshot((snapshot)=>{\r\n            const newArray = snapshot.docs.map((document)=>({\r\n                id: document.id,\r\n                ...document.data(),\r\n            }));\r\n            debugger;\r\n            setNweets(newArray);\r\n        });\r\n    };\r\n\r\n\r\n\r\n    useEffect(()=> {\r\n        getMyNweets();\r\n    },[]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n        {/* <div>\r\n            {nweets.map((nweet) => (\r\n                <Nweet\r\n                    key={nweet.id}\r\n                    nweetObj={nweet}\r\n                    isOwner={nweet.creatorId === userObj.uid}\r\n                />\r\n            )\r\n            )}\r\n        </div> */}\r\n\r\n            <form onSubmit={onSubmit}>\r\n                <input \r\n                    onChange = {onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Display Name\"\r\n                />\r\n                <input \r\n                    type=\"submit\"\r\n                    value=\"Update Profile\"\r\n                />\r\n            </form>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;","import { Link } from \"react-router-dom\";\n\nconst Navigation = ({userObj}) => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\n\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n  return(\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n          {isLoggedIn ? (\n            <>\n            <Route Exact path = \"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route Exact path = \"/profile\">\n              <Profile userObj={userObj} refreshUser={refreshUser}/>\n            </Route>\n            </>\n          ) : (\n            <Route Exact path = \"/\">\n              <Auth />\n            </Route>\n          )}\n\n          {/* 로그아웃한 경우, 리다이렉트 */}\n          {/* <Redirect from =\"*\" to=\"/\" /> */}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  // [] 인자를 설정해야지 1회만 동작함.\n  useEffect(()=>{\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // 크기줄이기\n        // setIsLoggedIn(user);\n\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(false);\n      }\n\n      setInit(true);  // init 상태를 변경\n    });\n  }, []);\n\n  const refreshUser = () => {\n    // setUserObj(authService.currentUser);\n\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n    {init ? (\n      <AppRouter \n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n      /> \n    ) : (\n      \"initializing...\"\n    )}\n\n    {/* 사진추가하면서 제거 */}\n    {/* <footer>&copy; {new Date().getFullYear()} Nwitter</footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}